<?php

/**
 * @file
 * Contains saml_features.module.
 */

use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function saml_features_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Check Saml Feature > admin form settings for user profile editing toggled on.
  $config = \Drupal::config('saml_features.adminsettings');
  if (!$config->get('enable_user_profile_edit')) {
    // Check if user previously authenticated via saml (source: samlauth.module).
    $authmap = \Drupal::service('externalauth.authmap');
    $account = \Drupal::currentUser();
    $saml_id = $authmap->get($account->id(), 'samlauth');

    if ($saml_id !== FALSE) {
      // Add fieldset note at top of user profile form.
      $form['account']['saml_disable_note']['#type'] = 'fieldset';
      $form['account']['saml_disable_note']['#title'] = t('Note');
      $form['account']['saml_disable_note']['#weight'] = -50;
      $form['account']['saml_disable_note'][]['#markup'] = t("SAML-authenticated account detected: some fields may not be edited.");

      // Disable editing of email/password fields.
      $form['account']['current_pass']['#disabled'] = TRUE;
      $form['account']['mail']['#disabled'] = TRUE;
      $form['account']['pass']['#disabled'] = TRUE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function saml_features_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $site_name = \Drupal::config('system.site')->get('name');
  $config = \Drupal::config('saml_features.adminsettings');
  $institution_txt = $config->get('exclude_stu') ? 'UNB' : 'UNB/STU';

  $form['name']['#description'] = t("Enter your $site_name username <em>(non-$institution_txt patrons)</em>");
  if (!\Drupal::currentUser()->isAuthenticated()) {
    $messenger = \Drupal::messenger();
    $messenger->addMessage(
      t("$institution_txt patrons must sign in using <strong>@auth_link</strong>.",
        [
          '@auth_link' => Link::fromTextAndUrl(
            t('Secure Services Login'),
            Url::fromUri('base:/saml/login')
          )->toString(),
        ]
      ),
      $messenger::TYPE_WARNING,
      FALSE
    );
    array_push($form['#validate'], '_saml_features_validate_final');
  }
}

/**
 * Form validation callback.
 *
 * Alter text of error messages, removing request/reset password url references.
 * Based from https://www.drupal.org/sandbox/ekes/emaillogin.
 *
 * @see saml_features_form_user_login_form_alter()
 */
function _saml_features_validate_final(array &$form, FormStateInterface $form_state) {
  $changed = FALSE;
  $config = \Drupal::config('saml_features.adminsettings');
  $institution_txt = $config->get('exclude_stu') ? 'UNB' : 'UNB/STU';

  if (($errors = $form_state->getErrors()) && !empty($errors['name']) && $errors['name'] instanceof TranslatableMarkup) {
    $error = $errors['name']->getUntranslatedString();
    if (strpos($error, 'Unrecognized username or password') !== false) {
      $errors['name'] = t(
        'Unrecognized username or password. Please try again.',
        $errors['name']->getArguments()
      );
      $changed = TRUE;
    }
    elseif (strpos($error, 'failed login attempts for this account. It is temporarily blocked') !== false) {
      $errors['name'] = t('There have been more than 5 failed login attempts for this account and
        it is temporarily blocked. Please try again later.');
      $changed = TRUE;
    }
    elseif (strpos($error, 'sign in with SSO') !== false) {
      $errors['name'] = t("$institution_txt account detected: please sign in using <strong>@auth_link</strong>.",
        [
          '@auth_link' => Link::fromTextAndUrl(
            t('Secure Services Login'),
            Url::fromUri('base:/saml/login')
          )->toString(),
        ]
      );
      $changed = TRUE;

      // SAML warning message redundant in this context.
      $messenger = \Drupal::messenger();
      $messenger->deleteByType($messenger::TYPE_WARNING);
    }
  } else {
    // Quick & dirty purge SAML warning message on authentication error.
    $messenger = \Drupal::messenger();
    $messenger->deleteByType($messenger::TYPE_WARNING);
  }

  if ($changed) {
    // It's clear and reset or set the protected variable by name with
    // FormState::setFormState().
    $form_state->clearErrors();
    foreach ($errors as $name => $error) {
      $form_state->setErrorByName($name, $error);
    }
  }
}
